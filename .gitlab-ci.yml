stages:
  - install
  - test

#default:
#  tags:
#    - docker

image: node:14.20


# before_script:
#   - pip install numpy
#   - pip install scipy
#   - npm install
#   - npm install --save-dev ts-jest

# Cache modules in between jobs

install:
  stage: install
  script:
    - cd nanoindentation-dashboard
    - npm cache clean --force
    # - npm i -g @angular/cli@14.2.10
    - npm install
    # - ./node_modules/.bin/ng build --prod
    - npm install -D typescript @angular/cli@15.0.1 @angular/compiler@15.0.1
  artifacts:
    paths:
      - nanoindentation-dashboard/node_modules/
  cache:
    paths:
      -  nanoindentation-dashboard/node_modules/

# install_dependencies:
#   image: node:12-alpine
#   stage: dependencies
#   script:
#     - npm install
#   only:
#     - master
#   cache:
#     key:
#       files:
#         - package-lock.json
#     paths:
#       - node_modules

test:
  stage: test
  script:
    - cd nanoindentation-dashboard
    - npm run test -- --watch=false --browsers=ChromeHeadless
  artifacts:
    paths:
      - node_modules/
  cache:
    key:
      files:
        - nanoindentation-dashboard/package-lock.json
    paths:
      - nanoindentation-dashboard/node_modules


# image: python:3.8



# build:
#   stage: build
#   script:
#     - yarn
#   cache:
#     paths:
#       - node_modules/
#   artifacts:
#     expire_in: 1 days
#     when: on_success
#     paths:
#       - node_modules/

# pytest-test:
#   stage: test
#   script:
#     - pip install pytest pytest-cov
#     - python -m pytest --cov-report=html --cov=src .
#   artifacts:
#     paths:
#       - coverage
#     expire_in: 30 days


# javascript:
#   # image: node:latest
#   stage: test
#   before_script:
#     - 'yarn global add jest'
#     - 'yarn add --dev jest-junit'
#   script:
#     - 'jest --ci --reporters=default --reporters=jest-junit'
#   artifacts:
#     when: always
#     reports:
#       junit:
#         - junit.xml



# build-job:
#   stage: build
#   script:
#     - echo "Hello, $GITLAB_USER_LOGIN!"

# test-job1:
#   stage: test
#   script:
#     - echo "This job tests something"

# test-job2:
#   stage: test
#   script:
#     - echo "This job tests something, but takes more time than test-job1."
#     - echo "After the echo commands complete, it runs the sleep command for 20 seconds"
#     - echo "which simulates a test that runs 20 seconds longer than test-job1"
#     - sleep 20

# deploy-prod:
#   stage: deploy
#   script:
#     - echo "This job deploys something from the $CI_COMMIT_BRANCH branch."
#   environment: production
